
# Azure Pipeline that run basic continuous integration on a Terraform project
# Running Pipeline from Main Branch, Creating artifacts, Publishing the artifacts and create plan.out

trigger: none # Disable CI triggers.

pool:
  vmImage: ubuntu-latest

variables:
  - group: 'Policy_Variable_Group'
  - name: 'serviceConnection'
    value: terraform-basic-testing-azure-connection
  - name: 'azureLocation'
    value: westeurope
  - name: 'terraformWorkingDirectory'
    value: $(System.DefaultWorkingDirectory)
  - name: 'terraformVersion'
    value: 1.4.6

stages:
  - stage: Build_Approval
    displayName: Build Approval
    jobs:
    - deployment: ContinuousIntegrationJob
      displayName: ContinuousIntegrationJob
      variables:
      - group: 'Policy_Variable_Group'
      - name: 'serviceConnection'
        value: terraform-basic-testing-azure-connection
      - name: 'azureLocation'
        value: westeurope
      - name: 'terraformWorkingDirectory'
        value: $(System.DefaultWorkingDirectory)
      - name: 'terraformVersion'
        value: 1.4.6
      environment: 'sandbox'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureCLI@2
              displayName: 'Azure CLI'
              inputs:
                azureSubscription: 'terraform-basic-testing-azure-connection'
                addSpnToEnvironment: true
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
                  echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
                  echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
                  echo "##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}"

            - task: AzureCLI@1
              displayName: Azure CLI 2
              inputs:
                azureSubscription: 'terraform-basic-testing-azure-connection'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  export subscription_id=$(subscription_id)
                  export resource_group_name=$(resource_group_name)
                  export storage_account_name=$(storage_account_name)
                  export container_name=$(container_name)
                  export key=$(key)
                  export access_key=$(access_key)                  
  - stage: Terraform_Steps
    displayName: Terraform Jobs
    jobs:
    - job: ContinuousIntegrationJob
      displayName: ContinuousIntegrationJob
      steps:
        - task: AzureCLI@2
          displayName: 'Azure CLI - Authentication'
          inputs:
            azureSubscription: 'terraform-basic-testing-azure-connection'
            addSpnToEnvironment: true
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}"      
        # Step 1: install Terraform on the Azure Pipelines agent
        - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: $(terraformVersion)
        # Step 2: run Terraform init to initialize the workspace
        - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: 'Run terraform init'
          inputs:
            command: init
            workingDirectory: $(terraformWorkingDirectory)
        # Step 3: run Terraform validate to validate HCL syntax
        - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: 'Run terraform validate'
          inputs:
            command: validate
            workingDirectory: $(terraformWorkingDirectory)
        # Step 4: run Terraform plan to validate HCL syntax
        - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: 'Run terraform plan'
          inputs:
            command: plan
            workingDirectory: $(terraformWorkingDirectory)
            environmentServiceName: $(serviceConnection)
            commandOptions: -var location=$(azureLocation)
        # Step 5: run Terraform apply
        - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: 'Run terraform apply'
          inputs:
            command: apply
            workingDirectory: $(terraformWorkingDirectory)
            environmentServiceName: $(serviceConnection)
            commandOptions: -var location=$(azureLocation)